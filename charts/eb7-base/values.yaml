# Default values.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: "busybox"
  tag: latest
  pullPolicy: IfNotPresent

namespace: "default"

# It can be either Deployment, DaemonSet, CronJob, Job or BlueGreenWeights
resourceType: "Deployment" 

# Adds HOST_IP to Pod Environment variables (Required for Jaeger integration)
# addHostIPEnv: true

# Add K8S_POD_NAME to Pod Environment variables
# addPodNameEnv: true

# environments:
#   SAMPLE_ENV1: "Value1"
#   SAMPLE_ENV2: "Value2"

# awsSecrets:
#   - objectAlias: SECRET1
#     objectType: secretsmanager
#     objectName: 'ARN1'
#   - objectAlias: SECRET2
#     objectType: secretsmanager
#     objectName: 'ARN2'

# servicePorts:
#   - port: 80
#     targetPort: 5000
#     protocol: TCP
#     name: http
#   - port: 8000
#     targetPort: 8000
#     protocol: TCP
#     name: grpc

# resources:
#   limits:
#     cpu: 1000m
#     memory: 512Mi
#   requests:
#     cpu: 100m
#     memory: 128Mi

serviceAccountName: default-sa

annotations:
  # linkerd.io/inject: enabled
  # log_index: my-index.my-app

disableCloudwatchMetrics: 'true'

# labels:
#   environment: staging

healthCheckProbes:
  failureThreshold: 5
  initialDelaySeconds: 5
  timeoutSeconds: 2
  periodSeconds: 30
  # Health check should not be enabled automatically
  # Because there might be different exec or httpGet keys
  # and you end up with multiple healthchecks
  # healthCheck:
  #   httpGet:
  #     path: "/health/status"
  #     port: 5000


# Enable it only for applications with long running
# Startup times to wait (failureThreshold * periodSeconds)
# Example: 20 minutes
# startupProbes:
#   failureThreshold: 20
#   periodSeconds: 60
#   healthCheck:
#     httpGet:
#       path: "/health/status"
#       port: 5000


# hostVolumes:
#   - name: host-volume-1
#     mountPath: /host-volume1
#     hostPath: /var/lib/host-volume1
#   - name: host-volume-2
#     mountPath: /host-volume2
#     hostPath: /var/lib/host-volume2


# storageClassName of your volumes should be aquired from DevOps Team
# persistentVolumes:
#   - name: efs-pvc1
#     mountPath: /var/lib/efs-pvc1
#     efsID: fs-xxxxxxxxx
#   - name: efs-pvc2
#     mountPath: /var/lib/efs-pvc2
#     efsID: fs-xxxxxxxxx

# It mounts /dev/shm for specific containers
# enableSharedMemoryVolume: false

# Enable for applications with long startup times
# progressDeadlineSeconds: 600 # 10 minutes

updateStrategy:
  type: RollingUpdate
  maxSurge: 1
  maxUnavailable: 0

# replicaCount: 1
# autoscaling:
#   minReplicas: 1
#   maxReplicas: 10
#   resourceMetrics:
#     targetCPUUtilizationPercentage: 80
#     targetMemoryUtilizationPercentage: 80
#   podMetrics:
#     sample_metric: "1000m"
#     sample2: "100k" 
#   externalMetrics:
#     ingress_name: "2" #number of requests


# Enable for Pod disruption budget
# budgetMinAvailable: 1

# Enable and set to anything to run on GPU nodes
# Otherwise, it will run on CPU nodes
# runOnGPU: true


# Run On Local (false by default)
# Setting it to true will disable non-essential resources
# like pod affinity to be able to deploy on local cluster
runOnLocal: false

# This is a special option to allow special services/pods to run
# On ON_DEMAND instances on EKS staging instead of SPOT instances
# DO NOT USE IT FOR PRODUCTION !
# runOnDemand: true


# Blue/Green Weights (if enabled by resourceType)
# blueGreenWeights:
#   blue_name: "test-app-2"
#   blue_weight: "80"
#   green_name: "test-app-3"
#   green_weight: "20"

# Container command and args override
# commandOverride: ["/bin/sh"]
# argsOverride: [
#   "-c",
#   "while true; do echo sleeping; sleep 10; done"
# ]

# lifecycle:
#   preStop:
#     exec:
#       command: ["/bin/sh","-c","echo"]


# securityContext:
#   privileged: true
#   capabilities:
#     add:
#     - SYS_ADMIN


# imagePullSecrets: []
# nodeSelector: {}


# priorityClassName: "system-node-critical"

# schedule: "0 5 * * *"

# hookValues:
#   imageRepository: "my-hook-repository"
#   imageTag: "my-hook-tag"
#   imagePullPolicy: "IfNotPresent"

#   hookType: "post-install"

#   commandOverride: ["/bin/sh"]
#   argsOverride: [
#     "-c",
#     "while true; do echo sleeping; sleep 10; done"
#   ]

#   environments:
#     SAMPLE_ENV1: "Value1"
#     SAMPLE_ENV2: "Value2"

#   awsSecrets:
#   - objectAlias: SECRET1
#     objectType: secretsmanager
#     objectName: 'ARN1'
#   - objectAlias: SECRET2
#     objectType: secretsmanager
#     objectName: 'ARN2'

#   inheritAwsSecrets: true
#   inheritEnvironments: true
